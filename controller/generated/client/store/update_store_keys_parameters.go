// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"bytescheme/controller/generated/models"
)

// NewUpdateStoreKeysParams creates a new UpdateStoreKeysParams object
// with the default values initialized.
func NewUpdateStoreKeysParams() *UpdateStoreKeysParams {
	var ()
	return &UpdateStoreKeysParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateStoreKeysParamsWithTimeout creates a new UpdateStoreKeysParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateStoreKeysParamsWithTimeout(timeout time.Duration) *UpdateStoreKeysParams {
	var ()
	return &UpdateStoreKeysParams{

		timeout: timeout,
	}
}

// NewUpdateStoreKeysParamsWithContext creates a new UpdateStoreKeysParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateStoreKeysParamsWithContext(ctx context.Context) *UpdateStoreKeysParams {
	var ()
	return &UpdateStoreKeysParams{

		Context: ctx,
	}
}

// NewUpdateStoreKeysParamsWithHTTPClient creates a new UpdateStoreKeysParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateStoreKeysParamsWithHTTPClient(client *http.Client) *UpdateStoreKeysParams {
	var ()
	return &UpdateStoreKeysParams{
		HTTPClient: client,
	}
}

/*UpdateStoreKeysParams contains all the parameters to send to the API endpoint
for the update store keys operation typically these are written to a http.Request
*/
type UpdateStoreKeysParams struct {

	/*Authorization
	  API key

	*/
	Authorization string
	/*Payload
	  Key value pairs to be updated

	*/
	Payload models.KeyValues

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update store keys params
func (o *UpdateStoreKeysParams) WithTimeout(timeout time.Duration) *UpdateStoreKeysParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update store keys params
func (o *UpdateStoreKeysParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update store keys params
func (o *UpdateStoreKeysParams) WithContext(ctx context.Context) *UpdateStoreKeysParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update store keys params
func (o *UpdateStoreKeysParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update store keys params
func (o *UpdateStoreKeysParams) WithHTTPClient(client *http.Client) *UpdateStoreKeysParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update store keys params
func (o *UpdateStoreKeysParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the update store keys params
func (o *UpdateStoreKeysParams) WithAuthorization(authorization string) *UpdateStoreKeysParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the update store keys params
func (o *UpdateStoreKeysParams) SetAuthorization(authorization string) {
	o.Authorization = authorization
}

// WithPayload adds the payload to the update store keys params
func (o *UpdateStoreKeysParams) WithPayload(payload models.KeyValues) *UpdateStoreKeysParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the update store keys params
func (o *UpdateStoreKeysParams) SetPayload(payload models.KeyValues) {
	o.Payload = payload
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateStoreKeysParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Authorization
	if err := r.SetHeaderParam("Authorization", o.Authorization); err != nil {
		return err
	}

	if o.Payload != nil {
		if err := r.SetBodyParam(o.Payload); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
