// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new store API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for store API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteStoreKeys(params *DeleteStoreKeysParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStoreKeysOK, error)

	ListStoreKeys(params *ListStoreKeysParams, authInfo runtime.ClientAuthInfoWriter) (*ListStoreKeysOK, error)

	UpdateStoreKeys(params *UpdateStoreKeysParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStoreKeysOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteStoreKeys deletes a key or keys

  Delete a key or keys
*/
func (a *Client) DeleteStoreKeys(params *DeleteStoreKeysParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStoreKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoreKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteStoreKeys",
		Method:             "DELETE",
		PathPattern:        "/v1/store/keys/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoreKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStoreKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteStoreKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListStoreKeys lists all keys

  List all keys
*/
func (a *Client) ListStoreKeys(params *ListStoreKeysParams, authInfo runtime.ClientAuthInfoWriter) (*ListStoreKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStoreKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListStoreKeys",
		Method:             "GET",
		PathPattern:        "/v1/store/keys/{key}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStoreKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListStoreKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListStoreKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateStoreKeys saves a key value pair

  Save a key value pair
*/
func (a *Client) UpdateStoreKeys(params *UpdateStoreKeysParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStoreKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoreKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateStoreKeys",
		Method:             "PUT",
		PathPattern:        "/v1/store/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoreKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStoreKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateStoreKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
