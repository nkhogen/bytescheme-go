// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new controller API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for controller API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetController(params *GetControllerParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerOK, error)

	ListControllers(params *ListControllersParams, authInfo runtime.ClientAuthInfoWriter) (*ListControllersOK, error)

	UpdateController(params *UpdateControllerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetController gets a controller

  Get a controller
*/
func (a *Client) GetController(params *GetControllerParams, authInfo runtime.ClientAuthInfoWriter) (*GetControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetController",
		Method:             "GET",
		PathPattern:        "/v1/controllers/{controllerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetControllerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetControllerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListControllers lists all controllers

  List all controllers
*/
func (a *Client) ListControllers(params *ListControllersParams, authInfo runtime.ClientAuthInfoWriter) (*ListControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListControllersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListControllers",
		Method:             "GET",
		PathPattern:        "/v1/controllers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListControllersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListControllersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateController updates a controller

  Update a controller
*/
func (a *Client) UpdateController(params *UpdateControllerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateControllerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateControllerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateController",
		Method:             "PUT",
		PathPattern:        "/v1/controllers/{controllerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateControllerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateControllerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateControllerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
