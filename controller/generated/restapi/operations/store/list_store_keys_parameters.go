// Code generated by go-swagger; DO NOT EDIT.

package store

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewListStoreKeysParams creates a new ListStoreKeysParams object
// no default values defined in spec.
func NewListStoreKeysParams() ListStoreKeysParams {

	return ListStoreKeysParams{}
}

// ListStoreKeysParams contains all the bound params for the list store keys operation
// typically these are obtained from a http.Request
//
// swagger:parameters ListStoreKeys
type ListStoreKeysParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*API key
	  Required: true
	  In: header
	*/
	Authorization string
	/*Key of the value
	  Required: true
	  In: path
	*/
	Key string
	/*Set it to true if the key is a prefix
	  In: query
	*/
	Prefix *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewListStoreKeysParams() beforehand.
func (o *ListStoreKeysParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := o.bindAuthorization(r.Header[http.CanonicalHeaderKey("Authorization")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	rKey, rhkKey, _ := route.Params.GetOK("key")
	if err := o.bindKey(rKey, rhkKey, route.Formats); err != nil {
		res = append(res, err)
	}

	qPrefix, qhkPrefix, _ := qs.GetOK("prefix")
	if err := o.bindPrefix(qPrefix, qhkPrefix, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAuthorization binds and validates parameter Authorization from header.
func (o *ListStoreKeysParams) bindAuthorization(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Authorization", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("Authorization", "header", raw); err != nil {
		return err
	}

	o.Authorization = raw

	return nil
}

// bindKey binds and validates parameter Key from path.
func (o *ListStoreKeysParams) bindKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Key = raw

	return nil
}

// bindPrefix binds and validates parameter Prefix from query.
func (o *ListStoreKeysParams) bindPrefix(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("prefix", "query", "bool", raw)
	}
	o.Prefix = &value

	return nil
}
