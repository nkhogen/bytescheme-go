// Code generated by go-swagger; DO NOT EDIT.

package controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"bytescheme/controller/generated/models"
)

// UpdateControllerOKCode is the HTTP code returned for type UpdateControllerOK
const UpdateControllerOKCode int = 200

/*UpdateControllerOK UpdateControllerResponse is the response for controller update

swagger:response updateControllerOK
*/
type UpdateControllerOK struct {

	/*
	  In: Body
	*/
	Payload *models.Controller `json:"body,omitempty"`
}

// NewUpdateControllerOK creates UpdateControllerOK with default headers values
func NewUpdateControllerOK() *UpdateControllerOK {

	return &UpdateControllerOK{}
}

// WithPayload adds the payload to the update controller o k response
func (o *UpdateControllerOK) WithPayload(payload *models.Controller) *UpdateControllerOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update controller o k response
func (o *UpdateControllerOK) SetPayload(payload *models.Controller) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateControllerOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*UpdateControllerDefault APIErrorResponse is all API errors

swagger:response updateControllerDefault
*/
type UpdateControllerDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIError `json:"body,omitempty"`
}

// NewUpdateControllerDefault creates UpdateControllerDefault with default headers values
func NewUpdateControllerDefault(code int) *UpdateControllerDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateControllerDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update controller default response
func (o *UpdateControllerDefault) WithStatusCode(code int) *UpdateControllerDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update controller default response
func (o *UpdateControllerDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update controller default response
func (o *UpdateControllerDefault) WithPayload(payload *models.APIError) *UpdateControllerDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update controller default response
func (o *UpdateControllerDefault) SetPayload(payload *models.APIError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateControllerDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
