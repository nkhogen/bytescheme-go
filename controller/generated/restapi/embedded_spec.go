// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API Documentation",
    "title": "Controller by Bytescheme",
    "version": "1.0.0"
  },
  "host": "bytescheme.mynetgear.com",
  "basePath": "/",
  "paths": {
    "/v1/controllers": {
      "get": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "List all controllers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Controller"
        ],
        "summary": "List all controllers",
        "operationId": "ListControllers",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListControllersResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        },
        "x-permission": "Read"
      }
    },
    "/v1/controllers/{controllerId}": {
      "get": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Get a controller",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Controller"
        ],
        "summary": "Get a controller",
        "operationId": "GetController",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ControllerID",
            "name": "controllerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/GetControllerResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        },
        "x-permission": "Read"
      },
      "put": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Update a controller",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Controller"
        ],
        "summary": "Update a controller",
        "operationId": "UpdateController",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ControllerID",
            "name": "controllerId",
            "in": "path",
            "required": true
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Controller"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateControllerResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        },
        "x-permission": "Write"
      }
    },
    "/v1/store/keys": {
      "put": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Save a key value pair",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Store"
        ],
        "summary": "Save a key value pair",
        "operationId": "UpdateStoreKeys",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Key value pairs to be updated",
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyValues"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/UpdateStoreKeysResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        },
        "x-permission": "Admin"
      }
    },
    "/v1/store/keys/{key}": {
      "get": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "List all keys",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Store"
        ],
        "summary": "List all keys",
        "operationId": "ListStoreKeys",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Key of the value",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set it to true if the key is a prefix",
            "name": "prefix",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ListStoreKeysResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        },
        "x-permission": "Admin"
      },
      "delete": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Delete a key or keys",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Store"
        ],
        "summary": "Delete a key or keys",
        "operationId": "DeleteStoreKeys",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Key of the value",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set it to true if the key is a prefix",
            "name": "prefix",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/DeleteStoreKeysResponse"
          },
          "default": {
            "$ref": "#/responses/APIError"
          }
        },
        "x-permission": "Admin"
      }
    }
  },
  "definitions": {
    "APIError": {
      "description": "APIError is the error",
      "type": "object",
      "properties": {
        "message": {
          "description": "Error message",
          "type": "string",
          "x-go-name": "Message"
        },
        "status": {
          "description": "HTTP status for the response",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "bytescheme/controller/model"
    },
    "Controller": {
      "description": "Controller model",
      "type": "object",
      "required": [
        "id",
        "pins"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "minLength": 1,
          "x-go-name": "ID"
        },
        "name": {
          "type": "string"
        },
        "pins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pin"
          },
          "x-go-name": "Pins"
        }
      },
      "x-go-package": "bytescheme/controller/model"
    },
    "KeyValue": {
      "description": "Key value pair model",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "KeyValues": {
      "description": "Key value pairs model",
      "type": "array",
      "items": {
        "$ref": "#/definitions/KeyValue"
      }
    },
    "Keys": {
      "description": "Keys in the store",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Pin": {
      "description": "Pin model",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the pin",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ID"
        },
        "mode": {
          "$ref": "#/definitions/PinMode"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/PinValue"
        }
      },
      "x-go-package": "bytescheme/controller/model"
    },
    "PinMode": {
      "description": "PinMode is the type for the pin mode",
      "type": "string",
      "enum": [
        "Input",
        "Output"
      ],
      "x-go-package": "bytescheme/controller/model"
    },
    "PinValue": {
      "description": "PinValue is the type for the pin value",
      "type": "string",
      "format": "int32",
      "enum": [
        "High",
        "Low"
      ],
      "x-go-package": "bytescheme/controller/model"
    }
  },
  "responses": {
    "APIError": {
      "description": "APIErrorResponse is all API errors",
      "schema": {
        "$ref": "#/definitions/APIError"
      }
    },
    "DeleteStoreKeysResponse": {
      "description": "DeleteStoreKeysResponse is the response model",
      "schema": {
        "$ref": "#/definitions/Keys"
      }
    },
    "GetControllerResponse": {
      "description": "GetControllerResponse is the response model",
      "schema": {
        "$ref": "#/definitions/Controller"
      }
    },
    "ListControllersResponse": {
      "description": "ListControllersResponse is the response model",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Controller"
        }
      }
    },
    "ListStoreKeysResponse": {
      "description": "ListStoreKeysResponse is the response model",
      "schema": {
        "$ref": "#/definitions/KeyValues"
      }
    },
    "UpdateControllerResponse": {
      "description": "UpdateControllerResponse is the response for controller update",
      "schema": {
        "$ref": "#/definitions/Controller"
      }
    },
    "UpdateStoreKeysResponse": {
      "description": "UpdateStoreKeysResponse is the response model",
      "schema": {
        "$ref": "#/definitions/KeyValues"
      }
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "description": "Api key authentication",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API Documentation",
    "title": "Controller by Bytescheme",
    "version": "1.0.0"
  },
  "host": "bytescheme.mynetgear.com",
  "basePath": "/",
  "paths": {
    "/v1/controllers": {
      "get": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "List all controllers",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Controller"
        ],
        "summary": "List all controllers",
        "operationId": "ListControllers",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ListControllersResponse is the response model",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Controller"
              }
            }
          },
          "default": {
            "description": "APIErrorResponse is all API errors",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-permission": "Read"
      }
    },
    "/v1/controllers/{controllerId}": {
      "get": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Get a controller",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Controller"
        ],
        "summary": "Get a controller",
        "operationId": "GetController",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ControllerID",
            "name": "controllerId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetControllerResponse is the response model",
            "schema": {
              "$ref": "#/definitions/Controller"
            }
          },
          "default": {
            "description": "APIErrorResponse is all API errors",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-permission": "Read"
      },
      "put": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Update a controller",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Controller"
        ],
        "summary": "Update a controller",
        "operationId": "UpdateController",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ControllerID",
            "name": "controllerId",
            "in": "path",
            "required": true
          },
          {
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Controller"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UpdateControllerResponse is the response for controller update",
            "schema": {
              "$ref": "#/definitions/Controller"
            }
          },
          "default": {
            "description": "APIErrorResponse is all API errors",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-permission": "Write"
      }
    },
    "/v1/store/keys": {
      "put": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Save a key value pair",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Store"
        ],
        "summary": "Save a key value pair",
        "operationId": "UpdateStoreKeys",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Key value pairs to be updated",
            "name": "Payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KeyValues"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UpdateStoreKeysResponse is the response model",
            "schema": {
              "$ref": "#/definitions/KeyValues"
            }
          },
          "default": {
            "description": "APIErrorResponse is all API errors",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-permission": "Admin"
      }
    },
    "/v1/store/keys/{key}": {
      "get": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "List all keys",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Store"
        ],
        "summary": "List all keys",
        "operationId": "ListStoreKeys",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Key of the value",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set it to true if the key is a prefix",
            "name": "prefix",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ListStoreKeysResponse is the response model",
            "schema": {
              "$ref": "#/definitions/KeyValues"
            }
          },
          "default": {
            "description": "APIErrorResponse is all API errors",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-permission": "Admin"
      },
      "delete": {
        "security": [
          {
            "ApiKey": []
          }
        ],
        "description": "Delete a key or keys",
        "produces": [
          "application/json"
        ],
        "tags": [
          "Store"
        ],
        "summary": "Delete a key or keys",
        "operationId": "DeleteStoreKeys",
        "parameters": [
          {
            "type": "string",
            "description": "API key",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Key of the value",
            "name": "key",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set it to true if the key is a prefix",
            "name": "prefix",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "DeleteStoreKeysResponse is the response model",
            "schema": {
              "$ref": "#/definitions/Keys"
            }
          },
          "default": {
            "description": "APIErrorResponse is all API errors",
            "schema": {
              "$ref": "#/definitions/APIError"
            }
          }
        },
        "x-permission": "Admin"
      }
    }
  },
  "definitions": {
    "APIError": {
      "description": "APIError is the error",
      "type": "object",
      "properties": {
        "message": {
          "description": "Error message",
          "type": "string",
          "x-go-name": "Message"
        },
        "status": {
          "description": "HTTP status for the response",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Status"
        }
      },
      "x-go-package": "bytescheme/controller/model"
    },
    "Controller": {
      "description": "Controller model",
      "type": "object",
      "required": [
        "id",
        "pins"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "minLength": 1,
          "x-go-name": "ID"
        },
        "name": {
          "type": "string"
        },
        "pins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Pin"
          },
          "x-go-name": "Pins"
        }
      },
      "x-go-package": "bytescheme/controller/model"
    },
    "KeyValue": {
      "description": "Key value pair model",
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "KeyValues": {
      "description": "Key value pairs model",
      "type": "array",
      "items": {
        "$ref": "#/definitions/KeyValue"
      }
    },
    "Keys": {
      "description": "Keys in the store",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "Pin": {
      "description": "Pin model",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the pin",
          "type": "integer",
          "format": "int32",
          "x-go-name": "ID"
        },
        "mode": {
          "$ref": "#/definitions/PinMode"
        },
        "name": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/PinValue"
        }
      },
      "x-go-package": "bytescheme/controller/model"
    },
    "PinMode": {
      "description": "PinMode is the type for the pin mode",
      "type": "string",
      "enum": [
        "Input",
        "Output"
      ],
      "x-go-package": "bytescheme/controller/model"
    },
    "PinValue": {
      "description": "PinValue is the type for the pin value",
      "type": "string",
      "format": "int32",
      "enum": [
        "High",
        "Low"
      ],
      "x-go-package": "bytescheme/controller/model"
    }
  },
  "responses": {
    "APIError": {
      "description": "APIErrorResponse is all API errors",
      "schema": {
        "$ref": "#/definitions/APIError"
      }
    },
    "DeleteStoreKeysResponse": {
      "description": "DeleteStoreKeysResponse is the response model",
      "schema": {
        "$ref": "#/definitions/Keys"
      }
    },
    "GetControllerResponse": {
      "description": "GetControllerResponse is the response model",
      "schema": {
        "$ref": "#/definitions/Controller"
      }
    },
    "ListControllersResponse": {
      "description": "ListControllersResponse is the response model",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Controller"
        }
      }
    },
    "ListStoreKeysResponse": {
      "description": "ListStoreKeysResponse is the response model",
      "schema": {
        "$ref": "#/definitions/KeyValues"
      }
    },
    "UpdateControllerResponse": {
      "description": "UpdateControllerResponse is the response for controller update",
      "schema": {
        "$ref": "#/definitions/Controller"
      }
    },
    "UpdateStoreKeysResponse": {
      "description": "UpdateStoreKeysResponse is the response model",
      "schema": {
        "$ref": "#/definitions/KeyValues"
      }
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "description": "Api key authentication",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "x-meta-array": [
    "value1",
    "value2"
  ],
  "x-meta-array-obj": [
    {
      "name": "obj",
      "value": "field"
    }
  ],
  "x-meta-value": "value"
}`))
}
